{"remainingRequest":"C:\\Users\\USUARIO\\Desktop\\ProyectoCiclo3\\dsg2gi3misiontic2020\\SPRINT FINAL\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\USUARIO\\Desktop\\ProyectoCiclo3\\dsg2gi3misiontic2020\\SPRINT FINAL\\3. Cliente-Vue\\cli\\src\\components\\HelloWorld.vue?vue&type=template&id=469af010&","dependencies":[{"path":"C:\\Users\\USUARIO\\Desktop\\ProyectoCiclo3\\dsg2gi3misiontic2020\\SPRINT FINAL\\3. Cliente-Vue\\cli\\src\\components\\HelloWorld.vue","mtime":1633718088495},{"path":"C:\\Users\\USUARIO\\Desktop\\ProyectoCiclo3\\dsg2gi3misiontic2020\\SPRINT FINAL\\3. Cliente-Vue\\cli\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\ProyectoCiclo3\\dsg2gi3misiontic2020\\SPRINT FINAL\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\ProyectoCiclo3\\dsg2gi3misiontic2020\\SPRINT FINAL\\3. Cliente-Vue\\cli\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\ProyectoCiclo3\\dsg2gi3misiontic2020\\SPRINT FINAL\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cgo8ZGl2IGNsYXNzPSJjb250YWluZXIiIHN0eWxlPSJoZWlnaHQ6IGF1dG87IGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7Ij4gICAgCjwhLS0gSGVhZGVyIC0tPgoKPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1leHBhbmQtbGcgbmF2YmFyLWxpZ2h0IHN0aWNreS10b3AiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRjhBODE1OyIgPgogICAgICAgIDxidXR0b24gY2xhc3M9Im5hdmJhci10b2dnbGVyIG5hdmJhci10b2dnbGVyLXJpZ2h0IiB0eXBlPSJidXR0b24iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9IiNuYXZiYXJUb2dnbGVyRGVtbzAxIiBhcmlhLWNvbnRyb2xzPSJuYXZiYXJUb2dnbGVyRGVtbzAxIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1sYWJlbD0iVG9nZ2xlIG5hdmlnYXRpb24iPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0ibmF2YmFyLXRvZ2dsZXItaWNvbiI+PC9zcGFuPgogICAgICAgIDwvYnV0dG9uPgoKICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvIj4gICA8IS0tIHN0eWxlPSJoZWlnaHQ6IDQwcHg7IHdpZHRoOiAxMjBweDsiIC0tPgogICAgICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2xvZ29saXN0b25hdmJhci5zdmciIHdpZHRoPSIzMCIgaGVpZ2h0PSIzMCIgY2xhc3M9ImQtaW5saW5lLWJsb2NrIGFsaWduLXRvcCIgYWx0PSJMb2dvIExpc3RvIE1lbnUiPgogICAgICAgIDwvYT4KCiAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2UiIGlkPSJuYXZiYXJUb2dnbGVyRGVtbzAxIj4KICAgICAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLW5hdiBtci1hdXRvIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1pdGVtIG5hdi1saW5rIGFjdGl2ZSIgaHJlZj0iLyI+SW5pY2lvIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij48L3NwYW4+PC9hPgogICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWl0ZW0gbmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIiBocmVmPSIvc2VydmljaW9zIiByb2xlPSJidXR0b24iIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPlNlcnZpY2lvczwvYT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUiIGFyaWEtbGFiZWxsZWRieT0ibmF2YmFyRHJvcGRvd24iPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIiBocmVmPSIvaGVsYWRlcmlhIj5IZWxhZGVyw61hPC9hPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIiBocmVmPSIvaG90ZG9ncyI+SG90IERvZ3M8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIGhyZWY9Ii9iZWJpZGFzIj5CZWJpZGFzPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWl0ZW0gbmF2LWxpbmsiIGhyZWY9Ii9ibG9nIj5CbG9nPC9hPgogICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWl0ZW0gbmF2LWxpbmsiIGhyZWY9Ii9lcXVpcG8iPkVxdWlwbzwvYT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyI+CiAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvbG9nb25hdmJhcnNsYm4uc3ZnIiB3aWR0aD0iMjYzIiBoZWlnaHQ9IjUwIiBjbGFzcz0iZC1pbmxpbmUtYmxvY2sgYWxpZ24tdG9wIiBhbHQ9IkxvZ28gTGlzdG8gTWVudSI+CiAgICAgICAgPC9hPgoKICAgICAgICA8Zm9ybSBjbGFzcz0iZm9ybS1pbmxpbmUgbXktMiAgbXItMiIgYWN0aW9uPSJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaCIgbWV0aG9kPSJnZXQiPgogICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCBtci0yIiB0eXBlPSJzZWFyY2giIHBsYWNlaG9sZGVyPSJCdXNjYXIgR29vZ2xlIiBhcmlhLWxhYmVsPSJTZWFyY2giPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRhcmsgbXktMiBtci0zIiB0eXBlPSJzdWJtaXQiPkJ1c2NhcjwvYnV0dG9uPgogICAgICAgIDwvZm9ybT4KICAgICAgICAKCiAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGZsZXgtcm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgoKICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tLyIgdGl0bGU9IiI+PGltZyBzcmM9Ii4uL2Fzc2V0cy9mYWNlYm9vay5wbmciIGFsdD0iRmFjZWJvb2sgTGlzdG8iIHRpdGxlPSJGYWNlYm9vayBMaXN0byIgd2lkdGg9IjM1IiBoZWlnaHQ9IjM1IiBjbGFzcz0iLmltZy1mbHVpZCBtci0yIi8+PC9hPgogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLyIgdGl0bGU9IiI+PGltZyBzcmM9Ii4uL2Fzc2V0cy9pbnN0YWdyYW0ucG5nIiBhbHQ9Ikluc3RhZ3JhbSBMaXN0byIgdGl0bGU9Ikluc3RhZ3JhbSBMaXN0byIgd2lkdGg9IjM1IiBoZWlnaHQ9IjM1IiBjbGFzcz0iLmltZy1mbHVpZCBtci0yIi8+PC9hPgogICAgICAgICAgICA8YSBocmVmPSJ3YS5saW5rLzhuaWZuaiIgdGl0bGU9IiI+PGltZyBzcmM9Ii4uL2Fzc2V0cy93aGF0c2FwcC5wbmciIGFsdD0iV2hhdHNBcHAgTGlzdG8iIHRpdGxlPSJXaGF0c0FwcCBMaXN0byIgd2lkdGg9IjM1IiBoZWlnaHQ9IjM1IiBjbGFzcz0iLmltZy1mbHVpZCIvPjwvYT4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L25hdj4KCjwhLS0gRmluIEhlYWRlciAtLT4KICAgIDwhLS0gY2Fyb3VzZWwgLS0+CgogICAgPGRpdiBpZD0iY2Fyb3VzZWxFeGFtcGxlQ29udHJvbHMiIGNsYXNzPSJjYXJvdXNlbCBzbGlkZSIgZGF0YS1yaWRlPSJjYXJvdXNlbCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2Fyb3VzZWwtaW5uZXIiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjdGl2ZSBjYXJvdXNlbC1pdGVtIGQtYmxvY2sgdy0xMDAiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgIHNyYz0iLi4vYXNzZXRzL2NhcnJ1c2VsMS5wbmciIGFsdD0iRmlyc3Qgc2xpZGUiIGNsYXNzPSJpbWctZmx1aWQiPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY3RpdmUgY2Fyb3VzZWwtaXRlbSBkLWJsb2NrIHctMTAwIj4KICAgICAgICAgICAgICAgICAgICA8aW1nICBzcmM9Ii4uL2Fzc2V0cy9jYXJydXNlbDIucG5nIiBhbHQ9IlNlY29uZCBzbGlkZSIgY2xhc3M9ImltZy1mbHVpZCI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjdGl2ZSBjYXJvdXNlbC1pdGVtIGQtYmxvY2sgdy0xMDAiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvY2FycnVzZWwzLnBuZyIgYWx0PSJUaGlyZCBzbGlkZSIgY2xhc3M9ImltZy1mbHVpZCI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgPC9kaXY+CiAgICAgICAgPGEgY2xhc3M9ImNhcm91c2VsLWNvbnRyb2wtcHJldiIgaHJlZj0iI2Nhcm91c2VsRXhhbXBsZUNvbnRyb2xzIiByb2xlPSJidXR0b24iIGRhdGEtc2xpZGU9InByZXYiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2Fyb3VzZWwtY29udHJvbC1wcmV2LWljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5QcmV2aW91czwvc3Bhbj4KICAgICAgICA8L2E+CiAgICAgICAgPGEgY2xhc3M9ImNhcm91c2VsLWNvbnRyb2wtbmV4dCIgaHJlZj0iI2Nhcm91c2VsRXhhbXBsZUNvbnRyb2xzIiByb2xlPSJidXR0b24iIGRhdGEtc2xpZGU9Im5leHQiPgogICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2Fyb3VzZWwtY29udHJvbC1uZXh0LWljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5OZXh0PC9zcGFuPgogICAgICAgIDwvYT4KICAgIDwvZGl2PgoKCjwhLS0gRmluIFNlY2Npw7NuIERhdmlkIE1lbnUgTmF2ZWdhY2nDs24geSBDYXJydXNlbC0tPiAKCjwhLS0gWWFuaXMgLS0gSW5pY2lvIFNlY2Npw7NuIFNlcnZpY2lvcyAtLT4KCiAgICA8aHIgLz4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCBiZy13aGl0ZSIgPgogICAgICAgIDxoMiBjbGFzcz0idGV4dC1jZW50ZXIiPlNlcnZpY2lvczwvaDI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiBjb2wteHMtMTIgY29sLWxnLTEyIj48L2Rpdj4gICAgICAgCiAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8aHIgLz4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4gCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1zbS0xMiBjb2wtbWQtMTIgY29sLWxnLTQgY29sLXhsLTQiPiAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHRleHQtY2VudGVyIj4gCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9oZWxhZGVyaWEucG5nIiBhbHQ9IlNlcnZpY2lvIEhlbGFkZXJpYSIgdGl0bGU9IlNlcnZpY2lvIEhlbGFkZXJpYSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY2FyZC10aXRsZSI+SGVsYWRlcsOtYTwvaDU+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij4gVGVuZW1vcyBoZWxhZG9zIHkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRlYWRhcyBjb24gdHVzIHNhYm9yZXMgZmF2b3JpdG9zOiBmcmVzYSwgbWFuZGFyaW5hLCBjaGljbGUsIGZydXRvcyByb2pvcywgYnJvd25pZS4uLjwvcD4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9oZWxhZGVyaWEiIGNsYXNzPSJidG4gYnRuLXdhcm5pbmciPlZlciBtw6FzIEhlbGFkZXLDrWE8L2E+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLXNtLTEyIGNvbC1tZC0xMiBjb2wtbGctNCBjb2wteGwtNCI+IAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgdGV4dC1jZW50ZXIiPiAKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIiPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2hvdGRvZ3MucG5nIiBhbHQ9IlZlbnRhIEhvdGRvZ3MiIHRpdGxlPSJWZW50YSBIb3Rkb2dzIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJjYXJkLXRpdGxlIj5Ib3QgRG9nczwvaDU+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij5EaXNmcnV0YSBkZSBsb3MgbWVqb3JlcyBIb3QgRG9ncyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzdG8gZGUgbGEgY2l1ZGFkIHRpcG8gYW1lcmljYW5vLCBvIHRhbWJpw6luIHRlbmVtb3MgaGF3YWlhbm9zLCByYW5jaGVyb3Mgby4uLjwvcD4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9ob3Rkb2dzIiBjbGFzcz0iYnRuIGJ0bi13YXJuaW5nIj5WZXIgbcOhcyBIb3QgRG9nczwvYT4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtc20tMTIgY29sLW1kLTEyIGNvbC1sZy00IGNvbC14bC00Ij4gCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCB0ZXh0LWNlbnRlciI+IAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciI+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvYmViaWRhcy5wbmciIGFsdD0iVmVudGEgQmViaWRhcyIgdGl0bGU9IlZlbnRhIEJlYmlkYXMiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNhcmQtdGl0bGUiPkJlYmlkYXM8L2g1PiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGV4dCI+VGVuZW1vcyB2YXJpZWRhZCBkZSBiZWJpZGFzIHBhcmEgcXVlIHZlbmdhcyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBjb21wYXJ0aXIgZW4gY3VhbHF1aWVyIG9jYXNpw7NuLiBEaXNmcnV0YSBkZSBhbWVyaWNhbm9zLCBleHByZXNvcy4uLjwvcD4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9iZWJpZGFzIiBjbGFzcz0iYnRuIGJ0bi13YXJuaW5nIj5WZXIgbcOhcyBCZWJpZGFzPC9hPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgCjwhLS0gWWFuaXMgLS0gRmluIFNlY2Npw7NuIFNlcnZpY2lvcyAtLT4KCjwhLS0gQnJhbmRvbiAtLSBJbmljaW8gU2VjY2nDs24gQmxvZyAtLT4KCiAgICA8aHI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgYmctd2hpdGUiID4KICAgICAgICA8aDIgY2xhc3M9InRleHQtY2VudGVyIj5CbG9nPC9oMj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIGNvbC14cy0xMiBjb2wtbGctMTIiPjwvZGl2PiAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCBiZy13aGl0ZSIgPiAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG10LW1kLTUgbXQtc20tNSBtdC14cy01Ij4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wteHMtMTIgYm9yZGVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9oaWVyYmFidWVuYS5wbmciIGFsdD0iUHJvcGllZGFkZXMgSGllcmJhYnVlbmEiIHRpdGxlPSJQcm9waWVkYWRlcyBIaWVyYmFidWVuYSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtMiI+IAogICAgICAgICAgICAgICAgICAgICAgICA8aDM+TGEgSGllcmJhIEJ1ZW5hPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtanVzdGlmeSI+IExhcyBwcm9waWVkYWRlcyBkZSBsYSBIaWVyYmEgQnVlbmEgc29uIG1heW9yZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21iaW5hZGEgY29uIGVsIGxpbcOzbi4gTGEgaGllcmJhIGJ1ZW5hIHRpZW5lIHByb3BpZWRhZGVzIGRlIGRvbG9yZXMgbGlnZXJvcyB5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlnZXN0acOzbi4gRWwgbGltw7NuIHNpcnZlIGNvbW8gYW50aW94aWRhbnRlIHBhcmEgZWwgY3VlcnBvIHkgY29udGllbmUgdml0YW1pbmEgQy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBjb250YWluZXItZmx1aWQganVzdGlmeS1jb250ZW50LWVuZCBwYi0yIG10LW4yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IiBocmVmPSIvaGllcmJhYnVlbmEiPk3DoXMgSW5mbzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgY29sLXhzLTEyIGJvcmRlciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvZW1wYW5hZGFzLnBuZyIgYWx0PSJFbXBhbmFkYXMgTWFydGljYSIgdGl0bGU9IkVtcGFuYWRhcyBNYXJ0aWNhIiAvPiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGgzPkVtcGFuYWRhcyBkZSBNYXJ0aWNhPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhyPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPiDCv1F1acOpbiBubyBoYSBjb21pZG8gdW5hIGRlbGljaW9zYSBlbXBhbmFkYSBkZSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXJ0aWNhPyBUZW5lbW9zIGV4Y2VsZW50ZXMgbm90aWNpYXMsIHJlYWxpemFtb3MgdW4gY29udmVuaW8gY29uIE1hcnRpY2EgeSBhaG9yYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlbmRlbW9zIHN1cyBpbmNyZcOtYmxlcyBlbXBhbmFkYXMgZW4gTGlzdG8uIE5vIGVzcGVyZXMgcGFyYSB2ZW5pciBhIGRpc2ZydXRhcmxhcy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBjb250YWluZXItZmx1aWQganVzdGlmeS1jb250ZW50LWVuZCBwYi0yIG10LW4yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IiBocmVmPSIvZW1wYW5hZGFzbWFydGljYSI+TcOhcyBJbmZvPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTYgY29sLXhzLTEyIGJvcmRlciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvbGljb3Jlcy5wbmciIGFsdD0iTGljb3JlcyBsZWdhbGVzIiB0aXRsZT0iTGljb3JlcyBsZWdhbGVzIiAvPiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aDM+TGljb3JlcyBMZWdhbGVzPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhyPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPiDCv1NhYmVzIGPDs21vIGlkZW50aWZpY2FyIHVuYSBib3RlbGxhIGRlIGxpY29yIGxlZ2FsPyBFbiBMaXN0byBlbmN1ZW50cmFzIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc29sYW1lbnRlIGxpY29yZXMgZXN0YW1waWxsYWRvcywgbGEgZm9ybWEgZGUgaWRlbnRpZmljYXJsb3MgZXMgY29uIGxhIGxlY3R1cmEgZGVsIGPDs2RpZ28gUVIgcXVlIHRyYWUgc3UgZXN0YW1waWxsYS4gQWPDoSB0ZSBlbnNlw7FhbW9zIGPDs21vLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGNvbnRhaW5lci1mbHVpZCBqdXN0aWZ5LWNvbnRlbnQtZW5kIHBiLTIgbXQtbjIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnkiIGhyZWY9Ii9saWNvcmVzbGVnYWxlcyI+TcOhcyBJbmZvPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wteHMtMTIgYm9yZGVyIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy90aW50by5wbmciIGFsdD0iUHJvcGllZGFkZXMgVGludG8iIHRpdGxlPSJQcm9waWVkYWRlcyBUaW50byIgLz4gICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5DYWbDqSBDdWx0dXJhPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPGhyPiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWp1c3RpZnkiPiBPdHJvIGNvbnZlbmlvIGltcG9ydGFudGUgcXVlIGhlbW9zIGhlY2hvIHBhcmEgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGksIGVzIGVsIGRlIG9mcmVjZXIgQ2Fmw6kgQ3VsdHVyYS4gRWwgbWVqb3IgY2Fmw6kgZXNwZWNpYWwgZGUgbGEgcmVnacOzbi4gQXPDrSBxdWUgc2kgcXVpZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2JhciBlbCBtZWpvciBjYWbDqSwgdmVuIGEgTGlzdG8geSB0ZSBwcmVwYXJhbW9zIHVuIGNhZsOpIHJlY2nDqW4gbW9saWRvIHkgdG9zdGFkby4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBjb250YWluZXItZmx1aWQganVzdGlmeS1jb250ZW50LWVuZCBwYi0yIG10LW4yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IiBocmVmPSIvY2FmZWN1bHR1cmEiPk3DoXMgSW5mbzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+Cgo8IS0tIEJyYW5kb24gLS0gRmluIFNlY2Npw7NuIEJsb2cgLS0+Cgo8IS0tIEhlaW5lciAtLSBJbmljaW8gU2VjY2nDs24gRXF1aXBvIC0tPgoKICAgIDxocj4KCiAgICA8ZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCBiZy13aGl0ZSIgPgogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJ0ZXh0LWNlbnRlciBwdC0zIj5OdWVzdHJvIEVxdWlwbzwvaDI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIG1iLTUiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIG10LTIuNSIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7Ij4gICAgICAgICA8IS0tIDxkaXYgY2xhc3M9ImNvbC1zbS02IGNvbC1tZC00IGNvbC14cy0yIGNvbC1sZy0yIj4gLS0+IAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCB0ZXh0LWRhcmsgYmctd2hpdGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBwLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9oZWluZXIucG5nIiBhbHQ9IkhlaW5lciIgdGl0bGU9IkhlaW5lciIgIHdpZHRoPSI5MGVtIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD0iOTBlbSIgdmlld0JveD0iMCAwIDE2IDE2IiBjbGFzcz0iYmkgYmktcGVyc29uLWJvdW5kaW5nLWJveCIgZmlsbD0iY3VycmVudENvbG9yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4gICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJjYXJkLXRpdGxlIj5IZWluZXI8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0iY2FyZC10ZXh0Ij5OdWVzdHJvIEdlcmVudGUgbm9zIGd1w61hIGEgbGxldmFyIGEgTGlzdG8gYSBzZXIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwgbWVqb3IgbHVnYXIgZGUgZXNwYXJjaW1pZW50byBkZSBsYSBjaXVkYWQuIFN1IGZ1bmNpw7NuIGVzIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmFyIHF1ZSBjYWRhIGRldGFsbGUgZXN0ZSBzaWVtcHJlIExpc3RvIHBhcmEgc2F0aXNmYWNlciBhIHRvZG9zIG51ZXN0cm9zIGNsaWVudGVzLiA8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LW11dGVkIj5HZXJlbnRlIEdlbmVyYWw8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCBtdC0yLjUiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOyI+ICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPSJjb2wtc20tNiBjb2wtbWQtNCBjb2wteHMtMiBjb2wtbGctMiI+IC0tPiAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHRleHQtZGFyayBiZy13aGl0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIHAtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2JyYW5kb24ucG5nIiBhbHQ9IkJyYW5kb24iIHRpdGxlPSJCcmFuZG9uIiBzdHlsZT0id2lkdGg6NTAlIi8+ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY2FyZC10aXRsZSI+QnJhbmRvbjwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJjYXJkLXRleHQiPkVsIEFkbWluaXN0cmFkb3IgZGUgTGlzdG8gZXMgbGEgcGVyc29uYSBxdWUgc2llbXByZSBlc3TDoSBhbCBmcmVudGUgZGUgbGEgb3BlcmFjacOzbi4gU3UgY29vcmRpbmFjacOzbiwgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFjZSBxdWUgc2llbXByZSBsbGV2ZW1vcyBhIHRpZW1wbyB0dXMgcGVkaWRvcyBjb24gdW5hIHNvbnJpc2EgeSBxdWUgdG9kbyBlc3RlIHNpZW1wcmUgTGlzdG8uPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1tdXRlZCI+QWRtaW5pc3RyYWRvcjwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIG10LTIuNSIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7Ij4gICAgICAgICA8IS0tIDxkaXYgY2xhc3M9ImNvbC1zbS02IGNvbC1tZC00IGNvbC14cy0yIGNvbC1sZy0yIj4gLS0+IAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgdGV4dC1kYXJrIGJnLXdoaXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgcC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMveWFuaXMucG5nIiBhbHQ9IllhbmlzIiB0aXRsZT0iWWFuaXMiIHN0eWxlPSJ3aWR0aDo1MCUiLz4gICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY2FyZC10aXRsZSI+WWFuaXM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0iY2FyZC10ZXh0Ij5OdWVzdHJhIENoZWYgZXMgbGEgZW5jYXJnYWRhIGRlIGRhcmxlIHZpZGEgeSBhbGVncsOtYSBhIGNhZGEgcGxhdG8gcXVlIGxsZWdhIGEgdMO6IG1lc2EuIFN1cyBtYW5vcyBwZXJtaXRlbiBxdWUgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9kb3MgbnVlc3Ryb3MgY2xpZW50ZXMgc2UgbGxldmVuIHVuIHJlY3VlcmRvIGVuIHN1IHBhbGFkYXIgcXVlIGxvcyBoYWNlIHJlZ3Jlc2FyLjwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPkNoZWYgRWplY3V0aXZhPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wgbXQtMi41IiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsiPiAgICAgICAgIDwhLS0gPGRpdiBjbGFzcz0iY29sLXNtLTYgY29sLW1kLTQgY29sLXhzLTIgY29sLWxnLTIiPiAtLT4gCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCB0ZXh0LWRhcmsgYmctd2hpdGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBwLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9kYXZpZC5wbmciIGFsdD0iRGF2aWQiIHRpdGxlPSJEYXZpZCIgc3R5bGU9IndpZHRoOjUwJSIvPiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJjYXJkLXRpdGxlIj5EYXZpZDwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJjYXJkLXRleHQiPlNpbiBudWVzdHJvIENvbnRhZG9yIG5vIGVzdGFyw61hbW9zIGNvbnRhbmRvIGVsIGN1ZW50byBkZSBudWVzdHJhIGVtcHJlc2EuIMOJbCBzaWVtcHJlIHRpZW5lIExpc3RvIGxvcyByZWN1cnNvcyBwYXJhIHBhZ2FyIHRvZG8gYSB0aW1lcG8sIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmEgcXVlIHNvbG8gbm9zIGVuZm9xdWVtb3MgZW4gbGEgYXRlbmNpw7NuIGFsIGNsaWVudGUuPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1tdXRlZCI+Q29udGFkb3I8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCBtdC0yLjUiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOyI+ICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPSJjb2wtc20tNiBjb2wtbWQtNCBjb2wteHMtMiBjb2wtbGctMiI+IC0tPiAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIHRleHQtZGFyayBiZy13aGl0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIHAtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL2phaW1lLnBuZyIgYWx0PSJKYWltZSBCYWNhcmVzIiB0aXRsZT0iSmFpbWUgQmFjYXJlcyIgc3R5bGU9IndpZHRoOjUwJSIvPiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPiAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY2FyZC10aXRsZSI+SmFpbWU8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0iY2FyZC10ZXh0Ij5OdWVzdHJvIENyZWFkb3IgQXVkaW92aXN1YWwgZXMgZWwgcXVlIGF0cmFlIG51ZXZvcyBjbGllbnRlcyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb24gc3UgZ3JhbiBpbmdlbmlvLCDDqWwgc2llbXByZSB0aWVuZSBMaXN0byBlbCBjb21lcmNpYWwgbyBsYSBwdWJsaWNpZGFkIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVjZXNhcmlhIHBhcmEgcG9kZXIgZ2VuZXJhciBsYXMgdmVudGFzIHBhcmEgcXVlIG5vcyB2aXNpdGVuIHkgcmVjb21pZW5kZW48L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1mb290ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LW11dGVkIj5DcmVhZG9yIEF1ZGlvdmlzdWFsPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PiAKICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKPCEtLSBIZWluZXIgLS0gRmluIFNlY2Npw7NuIEVxdWlwbyAtLT4KCgo8IS0tIERpdiBGaW5hbCAtLT4KPC9kaXY+Cgo="},null]}