{"remainingRequest":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\src\\components\\HelloWorld.vue?vue&type=template&id=469af010&scoped=true&","dependencies":[{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\src\\components\\HelloWorld.vue","mtime":1633574720902},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}