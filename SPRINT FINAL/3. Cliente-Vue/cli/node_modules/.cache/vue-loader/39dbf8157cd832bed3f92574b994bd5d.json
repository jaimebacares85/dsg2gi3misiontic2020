{"remainingRequest":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\src\\views\\About.vue?vue&type=template&id=039c5b43&","dependencies":[{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\src\\views\\About.vue","mtime":1633479391993},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}