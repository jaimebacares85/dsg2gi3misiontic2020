{"remainingRequest":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\src\\views\\Blog.vue?vue&type=template&id=781941dc&","dependencies":[{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\src\\views\\Blog.vue","mtime":1633718249648},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\USUARIO\\Desktop\\Sprint 3\\3. Cliente-Vue\\cli\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}